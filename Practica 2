https://youtu.be/O766MJUv0O8
USE AdventureWorksLT2022;
GO

-- Si existe, eliminarla primero para volver a crearla
IF OBJECT_ID('dbo.fn_OrdenesPorCliente', 'IF') IS NOT NULL
    DROP FUNCTION dbo.fn_OrdenesPorCliente;
GO

-- Crear la función con valor de tabla (Table-Valued Function)
CREATE FUNCTION dbo.fn_OrdenesPorCliente(@CustomerID INT)
RETURNS TABLE
AS
RETURN
(
    SELECT 
        c.FirstName + ' ' + c.LastName AS Cliente,
        h.SalesOrderID,
        h.OrderDate,
        p.Name AS Producto,
        d.OrderQty AS Cantidad,
        d.UnitPrice AS PrecioUnitario,
        (d.OrderQty * d.UnitPrice) AS Subtotal
    FROM SalesLT.SalesOrderHeader h
    INNER JOIN SalesLT.SalesOrderDetail d ON h.SalesOrderID = d.SalesOrderID
    INNER JOIN SalesLT.Product p ON d.ProductID = p.ProductID
    INNER JOIN SalesLT.Customer c ON h.CustomerID = c.CustomerID
    WHERE h.CustomerID = @CustomerID
);
GO

-- Ejemplo: mostrar todas las órdenes del cliente con ID 2
SELECT * 
FROM dbo.fn_OrdenesPorCliente(2);

USE AdventureWorksLT2022;
GO

-- Si existe, eliminarla primero
IF OBJECT_ID('dbo.fn_TotalGastadoPorCliente', 'FN') IS NOT NULL
    DROP FUNCTION dbo.fn_TotalGastadoPorCliente;
GO

-- Crear función escalar
CREATE FUNCTION dbo.fn_TotalGastadoPorCliente(@CustomerID INT)
RETURNS MONEY
AS
BEGIN
    DECLARE @Total MONEY;

    SELECT @Total = SUM(d.OrderQty * d.UnitPrice)
    FROM SalesLT.SalesOrderHeader h
    INNER JOIN SalesLT.SalesOrderDetail d
        ON h.SalesOrderID = d.SalesOrderID
    WHERE h.CustomerID = @CustomerID;

    -- Si el cliente no tiene órdenes, devolver 0
    RETURN ISNULL(@Total, 0);
END;
GO
-- Obtener el total gastado por el cliente con ID = 2
SELECT dbo.fn_TotalGastadoPorCliente(2) AS TotalGastado;

-- Mostrar el total gastado de cada cliente registrado
SELECT 
    c.CustomerID,
    c.FirstName + ' ' + c.LastName AS Cliente,
    dbo.fn_TotalGastadoPorCliente(c.CustomerID) AS TotalGastado
FROM SalesLT.Customer c
ORDER BY TotalGastado DESC;

USE AdventureWorksLT2022;
GO

-- Eliminar si ya existe
IF OBJECT_ID('dbo.fn_HistorialComprasCliente', 'IF') IS NOT NULL
    DROP FUNCTION dbo.fn_HistorialComprasCliente;
GO

-- Crear función con valor de tabla
CREATE FUNCTION dbo.fn_HistorialComprasCliente(@CustomerID INT)
RETURNS TABLE
AS
RETURN
(
    SELECT 
        h.SalesOrderID AS NumeroPedido,
        h.OrderDate AS FechaOrden,
        p.Name AS Producto,
        d.OrderQty AS Cantidad,
        d.UnitPrice AS PrecioUnitario,
        (d.OrderQty * d.UnitPrice) AS TotalProducto
    FROM SalesLT.SalesOrderHeader h
    INNER JOIN SalesLT.SalesOrderDetail d 
        ON h.SalesOrderID = d.SalesOrderID
    INNER JOIN SalesLT.Product p 
        ON d.ProductID = p.ProductID
    WHERE h.CustomerID = @CustomerID
);
GO
SELECT * 
FROM dbo.fn_HistorialComprasCliente(2);

SELECT 
    c.FirstName + ' ' + c.LastName AS Cliente,
    h.*
FROM dbo.fn_HistorialComprasCliente(2) h
JOIN SalesLT.Customer c ON c.CustomerID = 2;
