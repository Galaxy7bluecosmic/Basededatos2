BASE DE DATOS YA DESCARGADA E IMPLEMENTADA para estudiarla con los nuevos temas de la semana 5
AdventureWorksLT2022
--probando y practicandoi con la base e datos
Use AdventureWorksLT2022;
SELECT FirstName, LastName, CompanyName
FROM SalesLT.Customer
WHERE CompanyName LIKE '%Bike%';

SELECT h.SalesOrderID, c.FirstName, c.LastName, h.OrderDate
FROM SalesLT.SalesOrderHeader h
INNER JOIN SalesLT.Customer c ON h.CustomerID = c.CustomerID;

SELECT pc.Name AS Categoria, AVG(p.ListPrice) AS PrecioPromedio
FROM SalesLT.Product p
INNER JOIN SalesLT.ProductCategory pc ON p.ProductCategoryID = pc.ProductCategoryID
GROUP BY pc.Name;

SELECT c.FirstName, c.LastName, COUNT(h.SalesOrderID) AS TotalOrdenes
FROM SalesLT.Customer c
INNER JOIN SalesLT.SalesOrderHeader h ON c.CustomerID = h.CustomerID
GROUP BY c.FirstName, c.LastName
ORDER BY TotalOrdenes DESC;


CREATE TABLE SalesLT.ComentariosClientes (
    ComentarioID INT PRIMARY KEY IDENTITY(1,1),
    CustomerID INT NOT NULL,
    Comentario NVARCHAR(255),
    FechaComentario DATETIME DEFAULT GETDATE(),

    -- Relación con tabla existente (Customer)
    FOREIGN KEY (CustomerID) REFERENCES SalesLT.Customer(CustomerID)
);

INSERT INTO SalesLT.ComentariosClientes (CustomerID, Comentario)
VALUES
(1, 'Muy buen servicio'),
(2, 'Entrega rápida'),
(3, 'El producto llegó defectuoso');


INSERT INTO SalesLT.ComentariosClientes (CustomerID, Comentario)
VALUES
(1, 'Muy buen servicio'),
(2, 'Entrega rápida'),
(3, 'El producto llegó defectuoso');

SELECT c.FirstName, c.LastName, com.Comentario, com.FechaComentario
FROM SalesLT.ComentariosClientes com
INNER JOIN SalesLT.Customer c ON com.CustomerID = c.CustomerID;

-- Listar los 10 primeros clientes
SELECT TOP 10 CustomerID, FirstName, LastName, CompanyName
FROM SalesLT.Customer;

-- Clientes de la compañía que contienen "Bike" y viven en una ciudad distinta de "Seattle"
SELECT CustomerID, FirstName, LastName, CompanyName, City
FROM SalesLT.Customer
WHERE CompanyName LIKE '%Bike%'
  AND City <> 'Seattle';

-- Mostrar productos cuyo precio es mayor al precio promedio de todos los productos
SELECT ProductID, Name, ListPrice
FROM SalesLT.Product
WHERE ListPrice > (
    SELECT AVG(ListPrice) FROM SalesLT.Product
);

-- Insertar un cliente de prueba
INSERT INTO SalesLT.Customer (NameStyle, FirstName, LastName, EmailAddress, Phone, PasswordHash, PasswordSalt, rowguid, ModifiedDate)
VALUES (0, 'Victor', 'Paul', 'victor.paul@test.com', '999999999', 'HASH', 'SALT', NEWID(), GETDATE());

-- Actualizar el teléfono de un cliente
UPDATE SalesLT.Customer
SET Phone = '123-456-789'
WHERE CustomerID = 1;

-- Eliminar un cliente de prueba (cuidado con las FK)
DELETE FROM SalesLT.Customer
WHERE CustomerID = 1;

-- Calcular el precio promedio de productos por categoría, mostrando cada producto con su promedio
SELECT ProductID, Name, ProductCategoryID, ListPrice,
       AVG(ListPrice) OVER (PARTITION BY ProductCategoryID) AS PromedioCategoria
FROM SalesLT.Product;

-- Pivotear cantidad de órdenes por año
SELECT *
FROM (
    SELECT YEAR(OrderDate) AS Anio, CustomerID
    FROM SalesLT.SalesOrderHeader
) AS SourceTable
PIVOT (
    COUNT(CustomerID) FOR Anio IN ([2019],[2020],[2021],[2022])
) AS PivotTable;

