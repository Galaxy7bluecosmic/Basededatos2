https://youtu.be/O766MJUv0O8
USE AdventureWorksLT2022;
GO

-- Si existe, eliminarla primero para volver a crearla
IF OBJECT_ID('dbo.fn_OrdenesPorCliente', 'IF') IS NOT NULL
    DROP FUNCTION dbo.fn_OrdenesPorCliente;
GO

-- Crear la función con valor de tabla (Table-Valued Function)
CREATE FUNCTION dbo.fn_OrdenesPorCliente(@CustomerID INT)
RETURNS TABLE
AS
RETURN
(
    SELECT 
        c.FirstName + ' ' + c.LastName AS Cliente,
        h.SalesOrderID,
        h.OrderDate,
        p.Name AS Producto,
        d.OrderQty AS Cantidad,
        d.UnitPrice AS PrecioUnitario,
        (d.OrderQty * d.UnitPrice) AS Subtotal
    FROM SalesLT.SalesOrderHeader h
    INNER JOIN SalesLT.SalesOrderDetail d ON h.SalesOrderID = d.SalesOrderID
    INNER JOIN SalesLT.Product p ON d.ProductID = p.ProductID
    INNER JOIN SalesLT.Customer c ON h.CustomerID = c.CustomerID
    WHERE h.CustomerID = @CustomerID
);
GO

-- Ejemplo: mostrar todas las órdenes del cliente con ID 2
SELECT * 
FROM dbo.fn_OrdenesPorCliente(2);

USE AdventureWorksLT2022;
GO

-- Si existe, eliminarla primero
IF OBJECT_ID('dbo.fn_TotalGastadoPorCliente', 'FN') IS NOT NULL
    DROP FUNCTION dbo.fn_TotalGastadoPorCliente;
GO

-- Crear función escalar
CREATE FUNCTION dbo.fn_TotalGastadoPorCliente(@CustomerID INT)
RETURNS MONEY
AS
BEGIN
    DECLARE @Total MONEY;

    SELECT @Total = SUM(d.OrderQty * d.UnitPrice)
    FROM SalesLT.SalesOrderHeader h
    INNER JOIN SalesLT.SalesOrderDetail d
        ON h.SalesOrderID = d.SalesOrderID
    WHERE h.CustomerID = @CustomerID;

    -- Si el cliente no tiene órdenes, devolver 0
    RETURN ISNULL(@Total, 0);
END;
GO
-- Obtener el total gastado por el cliente con ID = 2
SELECT dbo.fn_TotalGastadoPorCliente(2) AS TotalGastado;

-- Mostrar el total gastado de cada cliente registrado
SELECT 
    c.CustomerID,
    c.FirstName + ' ' + c.LastName AS Cliente,
    dbo.fn_TotalGastadoPorCliente(c.CustomerID) AS TotalGastado
FROM SalesLT.Customer c
ORDER BY TotalGastado DESC;

USE AdventureWorksLT2022;
GO

-- Eliminar si ya existe
IF OBJECT_ID('dbo.fn_HistorialComprasCliente', 'IF') IS NOT NULL
    DROP FUNCTION dbo.fn_HistorialComprasCliente;
GO

-- Crear función con valor de tabla
CREATE FUNCTION dbo.fn_HistorialComprasCliente(@CustomerID INT)
RETURNS TABLE
AS
RETURN
(
    SELECT 
        h.SalesOrderID AS NumeroPedido,
        h.OrderDate AS FechaOrden,
        p.Name AS Producto,
        d.OrderQty AS Cantidad,
        d.UnitPrice AS PrecioUnitario,
        (d.OrderQty * d.UnitPrice) AS TotalProducto
    FROM SalesLT.SalesOrderHeader h
    INNER JOIN SalesLT.SalesOrderDetail d 
        ON h.SalesOrderID = d.SalesOrderID
    INNER JOIN SalesLT.Product p 
        ON d.ProductID = p.ProductID
    WHERE h.CustomerID = @CustomerID
);
GO
SELECT * 
FROM dbo.fn_HistorialComprasCliente(2);

SELECT 
    c.FirstName + ' ' + c.LastName AS Cliente,
    h.*
FROM dbo.fn_HistorialComprasCliente(2) h
JOIN SalesLT.Customer c ON c.CustomerID = 2;

USE AdventureWorksLT2022;
GO

IF OBJECT_ID('dbo.fn_NombreCompletoCliente', 'FN') IS NOT NULL
    DROP FUNCTION dbo.fn_NombreCompletoCliente;
GO

CREATE FUNCTION dbo.fn_NombreCompletoCliente(@CustomerID INT)
RETURNS NVARCHAR(200)
AS
BEGIN
    DECLARE @NombreCompleto NVARCHAR(200);

    SELECT @NombreCompleto = FirstName + ' ' + LastName
    FROM SalesLT.Customer
    WHERE CustomerID = @CustomerID;

    RETURN @NombreCompleto;
END;
GO
SELECT dbo.fn_NombreCompletoCliente(2) AS NombreCompleto;

SELECT 
    CustomerID,
    dbo.fn_NombreCompletoCliente(CustomerID) AS Cliente,
    CompanyName
FROM SalesLT.Customer;
USE AdventureWorksLT2022;
GO


-- Tabla principal (lado "uno")
CREATE TABLE dbo.Cliente (
    ClienteID INT PRIMARY KEY IDENTITY(1,1),
    Nombre NVARCHAR(100) NOT NULL
);

-- Tabla dependiente (lado "muchos")
CREATE TABLE dbo.Pedido (
    PedidoID INT PRIMARY KEY IDENTITY(1,1),
    ClienteID INT NOT NULL,
    FechaPedido DATE DEFAULT GETDATE(),
    Monto MONEY NOT NULL,
    FOREIGN KEY (ClienteID) REFERENCES dbo.Cliente(ClienteID)  -- Relación 1 a muchos
);

-- Insertar clientes
INSERT INTO dbo.Cliente (Nombre) VALUES ('Victor Paul'), ('Laura Díaz');

-- Insertar pedidos (varios para un mismo cliente)
INSERT INTO dbo.Pedido (ClienteID, Monto) VALUES
(1, 150.00),
(1, 230.50),
(2, 99.99);

SELECT 
    c.Nombre AS Cliente,
    p.PedidoID,
    p.FechaPedido,
    p.Monto
FROM dbo.Cliente c
INNER JOIN dbo.Pedido p ON c.ClienteID = p.ClienteID
ORDER BY c.Nombre;

CREATE OR ALTER FUNCTION fn_CantidadPedidosCliente(@CustomerID INT)
RETURNS INT
AS
BEGIN
    DECLARE @Cantidad INT;

    SELECT @Cantidad = COUNT(*)
    FROM SalesLT.SalesOrderHeader
    WHERE CustomerID = @CustomerID;

    RETURN ISNULL(@Cantidad, 0);
END;
GO
SELECT 
    c.CustomerID,
    c.FirstName + ' ' + c.LastName AS Cliente,
    h.SalesOrderID,
    h.OrderDate,
    dbo.fn_CantidadPedidosCliente(c.CustomerID) AS TotalPedidos
FROM SalesLT.Customer c
FULL JOIN SalesLT.SalesOrderHeader h 
    ON c.CustomerID = h.CustomerID
ORDER BY c.CustomerID;
CREATE DATABASE EmpresaDB;
GO

-- Usar la base de datos
USE EmpresaDB;
GO

-- Crear la tabla de empleados
CREATE TABLE Empleados (
    ID INT PRIMARY KEY IDENTITY(1,1),
    Nombre NVARCHAR(100),
    Cargo NVARCHAR(50),
    FechaIngreso DATE,
    Salario DECIMAL(10,2)
);
GO

-- Insertar datos
INSERT INTO Empleados (Nombre, Cargo, FechaIngreso, Salario)
VALUES 
('Ana Torres', 'Ingeniera de Seguridad', '2022-03-15', 4500.00),
('Luis Pérez', 'Técnico de Redes', '2021-11-01', 3200.00),
('María Gómez', 'Analista de Datos', '2023-01-10', 5000.00);
GO

-- Consultar empleados con salario mayor a 4000
SELECT Nombre, Cargo, Salario
FROM Empleados
WHERE Salario > 4000;
GO
-- Crear una tabla llamada Empleados
CREATE TABLE Empleados (
    ID INT PRIMARY KEY,
    Nombre NVARCHAR(50),
    Cargo NVARCHAR(50),
    Salario DECIMAL(10, 2)
);

-- Insertar un registro
INSERT INTO Empleados (ID, Nombre, Cargo, Salario)
VALUES (1, 'Ana Torres', 'Analista', 3500.00);

-- Consultar todos los empleados
SELECT * FROM Empleados;
